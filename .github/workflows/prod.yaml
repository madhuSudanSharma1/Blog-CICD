name: GitHub Actions For CI (PROD)
run-name: ${{ github.actor }} is running a GitHub Actions workflow for CI

on: 
  pull_request:
    branches: [ "main"]

  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
  PAGES_REPO: madhuSudanSharma1/blog-page
  PAGES_TOKEN: ${{ secrets.PAGES_TOKEN }}
jobs:
# Runs on every thing PR or push to any branch
  commitlint:
    if: github.event_name == 'pull_request' 
    name: Lint Commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.0.0'
      - name: Install Commitlint
        run: |
          npm install --save-dev @commitlint/cli @commitlint/config-conventional --legacy-peer-deps
      - name: Add commitlint config
        run: |
          echo "module.exports = {extends: ['@commitlint/config-conventional']};" > commitlint.config.js
      - name: Run Commitlint
        run: |
          git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s" | npx commitlint

# Runs on every thing PR or push to any branch
  lint-all-services:
    name: Lint All Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run frontend lint & security
        uses: ./.github/actions/lint-and-security-checks
        with:
          directory: frontend
          
      - name: Run backend1 lint & security
        uses: ./.github/actions/lint-and-security-checks
        with:
          directory: backend1

      - name: Run backend2 lint & security
        uses: ./.github/actions/lint-and-security-checks
        with:
          directory: backend2

      - name: Final Status
        run: echo "All services passed lint and security checks."

# For All Pull Requests
  notify-slack-pr:
    name: Notify Slack on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [commitlint, lint-all-services]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4   
  
      - name: Notify Slack
        uses: ./.github/actions/slack
        with:
          message: '{"text": "A new Pull Request was created by *${{ github.actor }}* targeting ${{ github.base_ref }} branch.\n<${{ github.event.pull_request.html_url }}|View PR>"}'

# For All Push
  notify-slack-push:
    name: Notify Slack on Push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ lint-all-services]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify Slack
        uses: ./.github/actions/slack
        with:
          message: '{"text": "A new Push was made by *${{ github.actor }}* to ${{ github.base_ref }} branch."}'

## Push to Dev OR MAIN â†’ Docker Build & Push
  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
    name: Run release-it
    runs-on: ubuntu-latest
    needs: [lint-all-services]
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB }}
      - name: Check if frontend has changed
        id: check_frontend
        uses: ./.github/actions/has-changed
        with:
          dir: frontend
      - name: Check if backend1 has changed
        id: check_backend1
        uses: ./.github/actions/has-changed
        with:
          dir: backend1
      - name: Check if backend2 has changed
        id: check_backend2
        uses: ./.github/actions/has-changed
        with:
          dir: backend2
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.0.0'
          cache: 'yarn'
      - name: Configure Git user
        run: |
          git config --global user.name "Madhu Sharma"
          git config --global user.email "077bct042.madhu@pcampus.edu.np"
      - name: Install dependencies
        if: steps.check_frontend.outputs.changed == 'true' || steps.check_backend1.outputs.changed == 'true' || steps.check_backend2.outputs.changed == 'true'
        run: yarn install --prefer-offline
      - name: Configure Git user
        run: |
          git config --global user.name "Madhu Sharma"
          git config --global user.email "077bct042.madhu@pcampus.edu.np"

      - name: Run release-it
        if: steps.check_frontend.outputs.changed == 'true' || steps.check_backend1.outputs.changed == 'true' || steps.check_backend2.outputs.changed == 'true'
        id: release
        run: |
          npx release-it --ci --no-git.requireCleanWorkingDir
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
  
  scan-and-publish-semgrep-report:
    name: Scan and Publish Semgrep Report
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep and json2html
        run: |
          pip install semgrep json2html
        shell: bash

      - name: Run Semgrep scan
        run: |
          semgrep --json  --config semgrep.yaml . >> semgrep-results.json || true
        shell: bash

      - name: Convert JSON to HTML
        run: |
          python3 -c "import json; from json2html import json2html; print(json2html.convert(json=json.load(open('semgrep-results.json'))))" > semgrep-report.html
        shell: bash


      - name: Checkout GitHub Pages repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PAGES_REPO }}
          token: ${{ env.PAGES_TOKEN }}
          path: pages-repo

      - name: Copy Semgrep HTML report to GitHub Pages repo
        run: |
          mkdir -p pages-repo/scan/semgrep
          cp semgrep-report.html pages-repo/scan/semgrep/index.html
        shell: bash

      - name: Commit and push to GitHub Pages
        run: |
          cd pages-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add scan/semgrep/index.html
          git commit -m "Update Semgrep scan report"
          git push origin main
        shell: bash

  build-and-push-frontend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: frontend
    needs: [lint-all-services, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Check if frontend has changed
        id: check_frontend
        uses: ./.github/actions/has-changed
        with:
          dir: frontend
      - name: Build and Push Docker Image
        if: steps.check_frontend.outputs.changed == 'true'
        uses: ./.github/actions/build-and-push
        with:
          service: frontend
          tag: ${{ needs.release.outputs.version }}
          package_artifact: false

  build-and-push-backends:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: backends
    needs: [lint-all-services, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Check if backend1 has changed
        id: check_backend1
        uses: ./.github/actions/has-changed
        with:
          dir: backend1
      - name: Check if backend2 has changed
        id: check_backend2
        uses: ./.github/actions/has-changed
        with:
          dir: backend2
      - name: Build and Push Docker Image (backend1)
        if: steps.check_backend1.outputs.changed == 'true'
        uses: ./.github/actions/build-and-push
        with:
          service: backend1
          tag: ${{ needs.release.outputs.version }}
          package_artifact: false
      - name: Build and Push Docker Image (backend2)
        if: steps.check_backend2.outputs.changed == 'true'
        uses: ./.github/actions/build-and-push
        with:
          service: backend2
          tag: ${{ needs.release.outputs.version }}
  trigger-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Trigger Deploy Workflow
    runs-on: backends
    needs:
      - build-and-push-frontend
      - build-and-push-backends
    steps:
      - name: Repository Dispatch - deploy-all
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: madhuSudanSharma1/blog-cicd
          event-type: trigger-deploy
          client-payload: |
            {
              "which-action": "deploy-all"
            }

